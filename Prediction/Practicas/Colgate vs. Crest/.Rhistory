detectIO(fit_crest)
tso(colgate_trainig, types = c("TC", "AO", "LS", "IO", "SLS"))
tso(colgate_training, types = c("TC", "AO", "LS", "IO", "SLS"))
tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS"))
View(colgate_outlier)
library(tsoutliers)
(colgate_outlier <- tso(colgate_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(colgate_outlier)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier)
(outliers_idx <- colgate_outlier$outliers$ind)
(outliers_colgate_idx <- colgate_outlier$outliers$ind)
(outliers_crest_idx <- colgate_outlier$outliers$ind)
(outliers_colgate_idx <- colgate_outlier$outliers$ind)
(outliers_crest_idx <- crest_outlier$outliers$ind)
arimax_model <- arimax(colgate_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(colgate_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model)
coeftest(arimax_model_colgate)
library(lmtest)
coeftest(arimax_model_colgate)
arimax_model_colgate <- arimax(colgate_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(colgate_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_colgate)
library(lmtest)
coeftest(arimax_model_colgate)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
coeftest(arimax_model_crest)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,1)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
coeftest(arimax_model_crest)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
coeftest(arimax_model_crest)
arimax_model_colgate <- arimax(colgate_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(colgate_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0,0)), #porque p=0
method = 'ML')
summary(arimax_model_colgate)
library(lmtest)
coeftest(arimax_model_colgate)
coeftest(fit_colgate)
coeftest(fit_colgate)
checkresiduals(arimax_model_colgate)
checkresiduals(arimax_model_crest)
colgate.test <- Arima(colgate_test, model = fit_colgate_outlier)
accuracy(colgate.test)
crest.test <- Arima(crest_test, model = fit_crest_outlier)
accuracy(crest.test)
library(fpp2)
autoplot(colgate) +
ggtitle("Colgate Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(crest) +
ggtitle("Crest Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(mydata, facets = TRUE)
autoplot(mydata, facets = FALSE)
library(fpp2)
autoplot(colgate) +
ggtitle("Colgate Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(crest) +
ggtitle("Crest Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(mydata, facets = TRUE)
autoplot(mydata, facets = FALSE) +
ggtitle("Cuotas de mercado de Crest y Colgate") +
xlab("Tiempo") +
ylab("Cuota de mercado")
library(openxlsx)
data <- read.xlsx("data.xlsx", colNames = TRUE, detectDates = TRUE)
head(data)
tail(data)
sum(is.na(data))
colgate <- ts(data$Colgate, start = 1958, frequency = 52)
crest <- ts(data$Crest, start = 1958, frequency = 52)
mydata <- ts(data[,c(3,4)], start = 1958, frequency = 52)
library(fpp2)
autoplot(colgate) +
ggtitle("Colgate Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(crest) +
ggtitle("Crest Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(mydata, facets = TRUE)
autoplot(mydata, facets = FALSE) +
ggtitle("Cuotas de mercado de Crest y Colgate") +
xlab("Tiempo") +
ylab("Cuota de mercado")
ggseasonplot(colgate, month.labels = TRUE, month.labels.left = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Colgate Market Share")
ggseasonplot(crest, week.labels = TRUE, week.labels.left = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Crest Market Share")
ggseasonplot(colgate, polar = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Colgate Market Share")
ggseasonplot(crest, polar = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Crest Market Share")
ggsubseriesplot(colgate) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: Colgate Market Share")
ggsubseriesplot(crest) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: Crest Market Share")
qplot(crest, colgate) +
ylab("Colgate market share)") + xlab("Crest market share")
gglagplot(crest)
gglagplot(colgate)
ggAcf(colgate, lag.max = 260)
ggAcf(crest, lag.max = 260)
set.seed(12345)
colgate_training <-  window(colgate, start = 1958,end = c(1962, 52))
crest_training <- window(crest, start = 1958, c(1962, 52))
colgate_test <- window(colgate, start = 1963)
crest_test <- window(crest, start = 1963)
training_data <- data[1:260,]
autoplot(colgate_training) +
autolayer(meanf(colgate_training, h = 16),
series = "Mean", PI = FALSE) +
autolayer(naive(colgate_training, h = 16),
series = "Naïve", PI = FALSE) +
autolayer(snaive(colgate_training, h = 16),
series = "Seasonal naïve", PI = FALSE) +
autolayer(colgate_test) +
ggtitle("Forecasts for Colgate's market shares") +
xlab("Year") + ylab("Market Share") +
guides(colour = guide_legend(title = "Forecast"))
autoplot(crest_training) +
autolayer(meanf(crest_training, h = 16),
series = "Mean", PI = FALSE) +
autolayer(naive(crest_training, h = 16),
series = "Naïve", PI = FALSE) +
autolayer(snaive(crest_training, h = 16),
series = "Seasonal naïve", PI = FALSE) +
autolayer(crest_test) +
ggtitle("Forecasts for Crest's market shares") +
xlab("Year") + ylab("Market Share") +
guides(colour = guide_legend(title = "Forecast"))
checkresiduals(naive(colgate_training))
checkresiduals(naive(crest_training))
accuracy(naive(colgate_training), colgate_test)
accuracy(naive(crest_training), crest_test)
accuracy(snaive(colgate_training), colgate_test)
accuracy(snaive(crest_training), crest_test)
autoplot(naive(colgate_training))
autoplot(naive(crest_training))
autoplot(snaive(colgate_training))
autoplot(snaive(crest_training))
naive(colgate_training, bootstrap = TRUE)
ggAcf(diff(colgate_training), lag.max = 260)
ggAcf(diff(crest_training), lag.max = 260)
Box.test(diff(colgate_training), type = "Ljung-Box")
Box.test(diff(crest_training), type = "Ljung-Box")
ggAcf(diff(diff(colgate_training)), lag.max = 260)
ggAcf(diff(diff(crest_training)), lag.max = 260)
Box.test(diff(diff(colgate_training)), type = "Ljung-Box")
Box.test(diff(diff(crest_training)), type = "Ljung-Box")
autoplot(diff(colgate_training,52)) +
xlab("Year") + ylab("") +
ggtitle("Antidiabetic drug sales")
ggAcf(diff(colgate_training,52), lag.max = 260)
ggAcf(diff((diff(diff(crest_training,52),1)),1), lag.max = 260)
library(urca)
summary(ur.kpss(colgate_training))
summary(ur.kpss(crest_training))
summary(ur.kpss(diff(colgate_training)))
summary(ur.kpss(diff(crest_training)))
ndiffs(colgate_training)
ndiffs(crest_training)
nsdiffs(colgate_training)
nsdiffs(crest_training)
(fit_colgate <- auto.arima(colgate_training, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
(fit_crest <- auto.arima(crest_training, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
checkresiduals(fit_colgate)
checkresiduals(fit_crest)
fit_colgate %>% forecast(h = 16) %>% autoplot(include = 80)
fit_crest %>% forecast(h = 16) %>% autoplot(include = 80)
colgate.test <- Arima(colgate_test, model = fit_colgate)
accuracy(colgate.test)
crest.test <- Arima(crest_test, model = fit_crest)
accuracy(crest.test)
library(TSA)
detectAO(fit_colgate)
print("Crest's Additive Outliers")
detectAO(fit_crest)
detectIO(fit_colgate)
detectIO(fit_crest)
library(tsoutliers)
(colgate_outlier <- tso(colgate_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(colgate_outlier)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier)
(fit_colgate_outlier <- auto.arima(colgate_outlier$yadj, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
(fit_crest_outlier <- auto.arima(crest_outlier$yadj, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
checkresiduals(fit_colgate_outlier)
checkresiduals(fit_crest_outlier)
fit_colgate_outlier %>% forecast(h = 16) %>% autoplot(include = 80)
fit_crest_outlier %>% forecast(h = 16) %>% autoplot(include = 80)
colgate.test <- Arima(colgate_test, model = fit_colgate_outlier)
accuracy(colgate.test)
crest.test <- Arima(crest_test, model = fit_crest_outlier)
accuracy(crest.test)
dim(mydata)
matplot(mydata, type = "l")
period <- seq(as.Date('1958/01/08'), as.Date('1962/12/26'), by = 'week')
data_zoo <- zoo(cbind(training_data$Crest, training_data$Colgate), period)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier)
summary(crest_outlier)
View(crest_outlier)
(compact_outlier_Colgate <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS"), tsmethod = "arima" =
(compact_outlier_Colgate <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS"), tsmethod = "arima",
order = c(0, 1, 1)))
(compact_outlier_Colgate <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS"), tsmethod = "arima"))
(compact_outlier_Colgate <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS"), tsmethod = "arima"), maxit.iloop = 20)
(compact_outlier_Colgate <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS"), tsmethod = "arima", maxit.iloop = 20))
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0,0)), #porque p=0
method = 'ML')
(outliers_colgate_idx <- colgate_outlier$outliers$ind)
(outliers_crest_idx <- crest_outlier$outliers$ind)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
library(lmtest)
coeftest(arimax_model_crest)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(1,0,1)), #porque p=0
method = 'ML')
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(1,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
library(lmtest)
coeftest(arimax_model_crest)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,1)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
library(lmtest)
coeftest(arimax_model_crest)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
arimax_model_colgate <- arimax(colgate_training,
order = c(1,0,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_coglate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
arimax_model_colgate <- arimax(colgate_training,
order = c(1,0,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
library(lmtest)
coeftest(arimax_model_crest)
mod.transf.crest <- arimax(x = colgate_training, order = c(1, 0, 1),
xtransf = data.frame(crest_training), # Atípico aditivo
transfer = list(c(0,0)), # Primero el step y luego el pulse
method = "ML")
mod.transf.crest
coeftest(mod.transf.crest)
library(openxlsx)
data <- read.xlsx("data.xlsx", colNames = TRUE, detectDates = TRUE)
head(data)
tail(data)
sum(is.na(data))
colgate <- ts(data$Colgate, start = 1958, frequency = 52)
crest <- ts(data$Crest, start = 1958, frequency = 52)
mydata <- ts(data[,c(3,4)], start = 1958, frequency = 52)
library(fpp2)
autoplot(colgate) +
ggtitle("Colgate Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(crest) +
ggtitle("Crest Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(mydata, facets = TRUE)
autoplot(mydata, facets = FALSE) +
ggtitle("Cuotas de mercado de Crest y Colgate") +
xlab("Tiempo") +
ylab("Cuota de mercado")
ggseasonplot(colgate, month.labels = TRUE, month.labels.left = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Colgate Market Share")
ggseasonplot(crest, week.labels = TRUE, week.labels.left = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Crest Market Share")
ggseasonplot(colgate, polar = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Colgate Market Share")
ggseasonplot(crest, polar = TRUE) +
ylab("Market Share") +
ggtitle("Seasonal plot: Crest Market Share")
ggsubseriesplot(colgate) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: Colgate Market Share")
ggsubseriesplot(crest) +
ylab("$ million") +
ggtitle("Seasonal subseries plot: Crest Market Share")
qplot(crest, colgate) +
ylab("Colgate market share)") + xlab("Crest market share")
gglagplot(crest)
gglagplot(colgate)
ggAcf(colgate, lag.max = 260)
ggAcf(crest, lag.max = 260)
set.seed(12345)
colgate_training <-  window(colgate, start = 1958,end = c(1962, 52))
crest_training <- window(crest, start = 1958, c(1962, 52))
colgate_test <- window(colgate, start = 1963)
crest_test <- window(crest, start = 1963)
training_data <- data[1:260,]
autoplot(colgate_training) +
autolayer(meanf(colgate_training, h = 16),
series = "Mean", PI = FALSE) +
autolayer(naive(colgate_training, h = 16),
series = "Naïve", PI = FALSE) +
autolayer(snaive(colgate_training, h = 16),
series = "Seasonal naïve", PI = FALSE) +
autolayer(colgate_test) +
ggtitle("Forecasts for Colgate's market shares") +
xlab("Year") + ylab("Market Share") +
guides(colour = guide_legend(title = "Forecast"))
autoplot(crest_training) +
autolayer(meanf(crest_training, h = 16),
series = "Mean", PI = FALSE) +
autolayer(naive(crest_training, h = 16),
series = "Naïve", PI = FALSE) +
autolayer(snaive(crest_training, h = 16),
series = "Seasonal naïve", PI = FALSE) +
autolayer(crest_test) +
ggtitle("Forecasts for Crest's market shares") +
xlab("Year") + ylab("Market Share") +
guides(colour = guide_legend(title = "Forecast"))
checkresiduals(naive(colgate_training))
checkresiduals(naive(crest_training))
accuracy(naive(colgate_training), colgate_test)
accuracy(naive(crest_training), crest_test)
accuracy(snaive(colgate_training), colgate_test)
accuracy(snaive(crest_training), crest_test)
autoplot(naive(colgate_training))
autoplot(naive(crest_training))
autoplot(snaive(colgate_training))
autoplot(snaive(crest_training))
naive(colgate_training, bootstrap = TRUE)
ggAcf(diff(colgate_training), lag.max = 260)
ggAcf(diff(crest_training), lag.max = 260)
Box.test(diff(colgate_training), type = "Ljung-Box")
Box.test(diff(crest_training), type = "Ljung-Box")
ggAcf(diff(diff(colgate_training)), lag.max = 260)
ggAcf(diff(diff(crest_training)), lag.max = 260)
Box.test(diff(diff(colgate_training)), type = "Ljung-Box")
Box.test(diff(diff(crest_training)), type = "Ljung-Box")
autoplot(diff(colgate_training,52)) +
xlab("Year") + ylab("") +
ggtitle("Antidiabetic drug sales")
ggAcf(diff(colgate_training,52), lag.max = 260)
ggAcf(diff((diff(diff(crest_training,52),1)),1), lag.max = 260)
library(urca)
summary(ur.kpss(colgate_training))
summary(ur.kpss(crest_training))
summary(ur.kpss(diff(colgate_training)))
summary(ur.kpss(diff(crest_training)))
ndiffs(colgate_training)
ndiffs(crest_training)
nsdiffs(colgate_training)
nsdiffs(crest_training)
(fit_colgate <- auto.arima(colgate_training, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
(fit_crest <- auto.arima(crest_training, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
checkresiduals(fit_colgate)
checkresiduals(fit_crest)
fit_colgate %>% forecast(h = 16) %>% autoplot(include = 80)
fit_crest %>% forecast(h = 16) %>% autoplot(include = 80)
colgate.test <- Arima(colgate_test, model = fit_colgate)
accuracy(colgate.test)
crest.test <- Arima(crest_test, model = fit_crest)
accuracy(crest.test)
library(TSA)
detectAO(fit_colgate)
print("Crest's Additive Outliers")
detectAO(fit_crest)
detectIO(fit_colgate)
detectIO(fit_crest)
library(tsoutliers)
(colgate_outlier <- tso(colgate_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(colgate_outlier)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier)
summary(crest_outlier)
(fit_colgate_outlier <- auto.arima(colgate_outlier$yadj, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
(fit_crest_outlier <- auto.arima(crest_outlier$yadj, seasonal = TRUE, stepwise = FALSE, approximation = FALSE))
checkresiduals(fit_colgate_outlier)
checkresiduals(fit_crest_outlier)
fit_colgate_outlier %>% forecast(h = 16) %>% autoplot(include = 80)
fit_crest_outlier %>% forecast(h = 16) %>% autoplot(include = 80)
colgate.test <- Arima(colgate_test, model = fit_colgate_outlier)
accuracy(colgate.test)
crest.test <- Arima(crest_test, model = fit_crest_outlier)
accuracy(crest.test)
dim(mydata)
matplot(mydata, type = "l")
period <- seq(as.Date('1958/01/08'), as.Date('1962/12/26'), by = 'week')
data_zoo <- zoo(cbind(training_data$Crest, training_data$Colgate), period)
mod.transf.colgate <- arimax(x = colgate_training, order = c(1, 0, 1),
xtransf = data.frame(crest_training), # Atípico aditivo
transfer = list(c(0,0)), # Primero el step y luego el pulse
method = "ML")
mod.transf.colgate
checkresiduals(arimax_model_crest)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0,0)), #porque p=0
method = 'ML')
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier, main = "Título")
summary(crest_outlier)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier, title = "Título")
summary(crest_outlier)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier)
summary(crest_outlier)
(outliers_colgate_idx <- colgate_outlier$outliers$ind)
(outliers_crest_idx <- crest_outlier$outliers$ind)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
arimax_model_colgate <- arimax(colgate_training,
order = c(1,0,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
library(lmtest)
coeftest(arimax_model_crest)
arimax_model_colgate <- arimax(colgate_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(colgate_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0,0)), #porque p=0
method = 'ML')
summary(arimax_model_colgate)
library(lmtest)
coeftest(arimax_model_colgate)
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
coeftest(arimax_model_crest)
mod.transf.colgate <- arimax(x = colgate_training, order = c(1, 0, 1),
xtransf = data.frame(crest_training), # Atípico aditivo
transfer = list(c(0,0)), # Primero el step y luego el pulse
method = "ML")
mod.transf.colgate
coeftest(mod.transf.colgate)
mod.transf.colgate %>% forecast(h = 16) %>% autoplot(include = 80)
mod.transf.colgate$residuals
plot(mod.transf.colgate$residuals)
corr(data)
cor(data)
